package educative.modifiedbinarysearch;

import java.util.List;

public class BinarySearchRotated {
    public static int binarySearchRotated(List<Integer> nums, int target) {
        int i = 0, j = nums.size() - 1;
        while (i <= j) {
            int mid = (i + j) / 2;

            if (target == nums.get(mid)) {
                return mid;
            }
            // start to mid is sorted
            else if (nums.get(i) <= nums.get(mid)) {
                if (nums.get(i) <= target && target < nums.get(mid)) {
                    j = mid - 1; // target is within the sorted first half of the array
                } else {
                    i = mid + 1; // target is not within the sorted first half, so let’s examine the unsorted second half
                }
            }
            // mid to end is sorted
            else {
                if (nums.get(mid) < target && target <= nums.get(j)) {
                    i = mid + 1; // target is within the sorted second half of the array
                } else {
                    j = mid - 1; // target is not within the sorted second half, so let’s examine the unsorted first half
                }
            }
        }
        // Replace this placeholder return statement with your code
        return -1;
    }

    public static void main(String[] args) {
        List<Integer> nums = List.of(-8264, -8259, -8237, -8224, -8202, -8196, -8166, -8138, -8129, -8098, -8054, -8000, -7978, -7960, -7952, -7939, -7921, -7902, -7851, -7847, -7839, -7807, -7773, -7738, -7735, -7670, -7632, -7587, -7564, -7508, -7483, -7442, -7432, -7393, -7338, -7335, -7214, -7138, -7130, -7125, -7091, -7052, -7032, -7000, -6990, -6983, -6974, -6929, -6921, -6919, -6883, -6880, -6878, -6869, -6865, -6864, -6851, -6844, -6823, -6716, -6673, -6664, -6620, -6602, -6576, -6537, -6528, -6480, -6479, -6472, -6455, -6437, -6421, -6413, -6368, -6345, -6320, -6277, -6270, -6262, -6231, -6218, -6159, -6139, -6137, -6080, -6071, -6068, -6067, -6031, -5995, -5969, -5951, -5947, -5871, -5849, -5839, -5833, -5830, -5824, -5751, -5733, -5723, -5714, -5688, -5674, -5629, -5624, -5579, -5565, -5556, -5550, -5541, -5536, -5513, -5480, -5443, -5324, -5289, -5287, -5214, -5180, -5178, -5158, -5059, -5024, -5022, -5020, -4996, -4991, -4968, -4966, -4960, -4947, -4904, -4903, -4884, -4882, -4876, -4750, -4745, -4622, -4589, -4555, -4544, -4505, -4484, -4448, -4309, -4307, -4281, -4239, -4238, -4177, -4128, -4127, -4126, -4108, -4057, -3976, -3927, -3910, -3831, -3771, -3763, -3740, -3727, -3700, -3638, -3633, -3598, -3573, -3494, -3489, -3451, -3392, -3373, -3350, -3334, -3316, -3236, -3165, -3102, -3093, -3042, -3035, -3027, -3003, -2975, -2968, -2949, -2948, -2941, -2930, -2884, -2876, -2843, -2812, -2793, -2757, -2754, -2731, -2704, -2665, -2653, -2559, -2555, -2534, -2482, -2419, -2388, -2382, -2351, -2224, -2215, -2173, -2172, -2165, -2159, -2086, -2067, -2063, -2034, -2024, -1993, -1984, -1973, -1963, -1944, -1940, -1914, -1902, -1893, -1892, -1815, -1781, -1739, -1729, -1691, -1643, -1581, -1536, -1518, -1504, -1500, -1491, -1454, -1439, -1404, -1395, -1376, -1366, -1362, -1329, -1305, -1273, -1219, -1133, -1048, -1022, -1009, -997, -995, -976, -933, -932, -922, -902, -898, -826, -729, -718, -709, -684, -680, -638, -595, -592, -567, -549, -528, -459, -443, -424, -416, -407, -372, -275, -260, -241, -235, -230, -229, -216, -192, -185, -179, -170, -146, -115, -112, -111, -48, -39, -37, -24, -2, 2, 82, 150, 153, 183, 197, 237, 282, 286, 289, 336, 357, 402, 436, 458, 477, 482, 524, 566, 600, 614, 617, 662, 715, 727, 830, 880, 914, 983, 991, 994, 995, 1036, 1055, 1056, 1067, 1165, 1202, 1228, 1282, 1291, 1375, 1385, 1389, 1476, 1526, 1527, 1568, 1584, 1604, 1632, 1647, 1652, 1660, 1665, 1677, 1690, 1707, 1751, 1802, 1861, 1876, 1900, 1991, 1996, 2011, 2084, 2085, 2094, 2099, 2105, 2115, 2154, 2176, 2191, 2197, 2204, 2240, 2245, 2268, 2276, 2320, 2344, 2394, 2398, 2406, 2465, 2523, 2550, 2556, 2570, 2591, 2620, 2679, 2693, 2719, 2729, 2751, 2810, 2896, 2900, 2902, 2906, 2921, 2923, 2962, 3019, 3048, 3077, 3155, 3179, 3227, 3228, 3246, 3247, 3249, 3252, 3296, 3313, 3332, 3355, 3369, 3399, 3404, 3437, 3453, 3454, 3460, 3486, 3505, 3557, 3560, 3569, 3573, 3597, 3624, 3627, 3657, 3686, 3699, 3720, 3745, 3750, 3760, 3797, 3876, 3952, 3962, 3972, 3988, 3990, 4030, 4052, 4056, 4060, 4087, 4103, 4108, 4125, 4154, 4157, 4169, 4181, 4224, 4227, 4236, 4242, 4258, 4266, 4270, 4301, 4319, 4328, 4347, 4406, 4424, 4438, 4457, 4467, 4480, 4482, 4484, 4530, 4564, 4565, 4578, 4579, 4619, 4623, 4636, 4676, 4757, 4769, 4800, 4809, 4816, 4821, 4832, 4905, 4969, 4983, 4984, 4985, 4987, 5012, 5034, 5058, 5112, 5136, 5228, 5275, 5281, 5297, 5339, 5362, 5363, 5385, 5393, 5403, 5409, 5488, 5490, 5509, 5522, 5590, 5592, 5601, 5614, 5667, 5748, 5776, 5785, 5790, 5821, 5830, 5940, 5966, 6000, 6107, 6190, 6200, 6209, 6250, 6252, 6260, 6284, 6329, 6343, 6346, 6379, 6398, 6406, 6433, 6453, 6458, 6478, 6527, 6540, 6608, 6612, 6682, 6693, 6730, 6840, 6870, 6984, 6988, 7026, 7030, 7038, 7047, 7101, 7183, 7188, 7199, 7253, 7267, 7279, 7423, 7425, 7429, 7484, 7510, 7591, 7638, 7643, 7664, 7709, 7760, 7761, 7825, 7834, 7851, 7854, 7871, 7917, 7969, 7983, 8025, 8043, 8104, 8119, 8142, 8193, 8211, 8235, 8357, 8358, 8403, 8420, 8466, 8484, 8496, 8535, 8536, 8545, 8569, 8590, 8593, 8606, 8611, 8633, 8637, 8664, 8668, 8697, 8700, 8701, 8704, 8714, 8734, 8742, 8825, 8852, 8886, 8892, 8915, 8918, 8976, 9009, 9015, 9019, 9036, 9113, 9194, 9225, 9260, 9285, 9294, 9357, 9440, 9447, 9498, 9499, 9508, 9515, 9519, 9525, 9579, 9655, 9670, 9683, 9699, 9710, 9715, 9723, 9724, 9730, 9751, 9783, 9833, 9836, 9845, 9866, 9884, 9886, 9943, 9947, -10000, -9993, -9949, -9935, -9920, -9913, -9877, -9873, -9854, -9834, -9759, -9724, -9716, -9686, -9629, -9520, -9516, -9502, -9494, -9489, -9435, -9393, -9390, -9375, -9305, -9282, -9268, -9254, -9244, -9207, -9150, -9141, -9122, -9106, -9056, -9051, -9011, -8980, -8952, -8868, -8864, -8860, -8843, -8725, -8678, -8669, -8628, -8572, -8568, -8555, -8527, -8511, -8494, -8422, -8389, -8376, -8303);
        int target = -10000;

        System.out.println(binarySearchRotated(nums, target));
    }
}
